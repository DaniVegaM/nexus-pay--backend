import {createUnifiedPaymentService} from "../UnifiedOpenPaymentService.js";
import {DEFAULT_TEST_CONFIG} from "../ClientOpenPaymentsService.js";

const customConfig = {
    ...DEFAULT_TEST_CONFIG,
};

// Crear instancia del servicio unificado
const paymentService = createUnifiedPaymentService(customConfig);

async function ejemplosPagosSimples() {
    try {
        console.log("=== üí∏ PAGOS SIMPLES ===");

        // Pago √∫nico directo
        console.log("\n1Ô∏è‚É£ Pago √∫nico directo:");
        const payment1 = await paymentService.sendPayment(
            "https://ilp.interledger-test.dev/yisus19",
            "https://ilp.interledger-test.dev/client_test",
            15000, // $150.00
            { description: "Pago por servicios de desarrollo" ,onAuthorizationNeeded:true}
        );
        console.log(`‚úÖ Pago completado: ${payment1.operationId}`);

        // Pago √∫nico con preparaci√≥n (para casos complejos)
        console.log("\n2Ô∏è‚É£ Pago √∫nico con preparaci√≥n:");
        const prepared = await paymentService.prepareSinglePayment(
            "https://ilp.interledger-test.dev/yisus19",
            "https://ilp.interledger-test.dev/client_test",
            25000 // $250.00
        );

        console.log(prepared)
        if (prepared.authorizationUrl) {
            console.log("üîê Autorizaci√≥n requerida:", prepared.authorizationUrl);
            const outgoingPaymentGrant = await paymentService.manageAuth(prepared.senderWallet, prepared.quote);
            console.log("‚úÖ Usuario autoriz√≥ el pago");
        }

        const completed = await paymentService.completeSinglePayment(prepared.operationId);
        console.log(`‚úÖ Pago preparado completado: ${completed.operationId}`);

    } catch (error) {
        console.error("‚ùå Error en pagos simples:", error.message);
    }
}

async function ejemplosPagosDivididos() {
    try {
        console.log("\n=== üí∞ PAGOS DIVIDIDOS ===");

        // Split payment con montos fijos
        console.log("\n1Ô∏è‚É£ Distribuci√≥n con montos fijos:");
        const recipients1 = [
            {
                walletUrl: "https://ilp.interledger-test.dev/developer1",
                type: "fixed",
                value: 30000, // $300.00
                description: "Lead Developer"
            },
            {
                walletUrl: "https://ilp.interledger-test.dev/developer2",
                type: "fixed",
                value: 20000, // $200.00
                description: "Junior Developer"
            },
            {
                walletUrl: "https://ilp.interledger-test.dev/platform",
                type: "fixed",
                value: 5000, // $50.00 (comisi√≥n)
                description: "Platform Fee"
            }
        ];

        const splitPayment1 = await paymentService.sendSplitPayment(
            "https://ilp.interledger-test.dev/project_client",
            recipients1
        );
        console.log(`‚úÖ Pago dividido completado: ${splitPayment1.operationId}`);
        console.log(`üìä ${splitPayment1.summary.successfulPayments} pagos exitosos`);

        // Distribuci√≥n de comisiones por porcentajes
        console.log("\n2Ô∏è‚É£ Distribuci√≥n de comisiones por porcentajes:");
        const commissionRules = [
            {
                walletUrl: "https://ilp.interledger-test.dev/salesperson",
                percentage: 40,
                description: "Comisi√≥n vendedor principal"
            },
            {
                walletUrl: "https://ilp.interledger-test.dev/manager",
                percentage: 20,
                description: "Comisi√≥n gerente"
            },
            {
                walletUrl: "https://ilp.interledger-test.dev/company",
                percentage: 40,
                description: "Fondo de la empresa"
            }
        ];

        const baseAmount = 50000; // $500.00 de venta
        const commissions = await paymentService.distributeCommissions(
            "https://ilp.interledger-test.dev/sales_account",
            baseAmount,
            commissionRules
        );
        console.log(`‚úÖ Comisiones distribuidas: ${commissions.operationId}`);

    } catch (error) {
        console.error("‚ùå Error en pagos divididos:", error.message);
    }
}

async function ejemplosMonederoVirtual() {
    try {
        console.log("\n=== üí≥ MONEDERO VIRTUAL ===");

        // Crear monedero para m√∫ltiples pagos
        console.log("\n1Ô∏è‚É£ Creando monedero virtual:");
        const wallet = await paymentService.createPaymentWallet(
            "https://ilp.interledger-test.dev/company_treasury",
            200000, // $2,000.00 disponible
            {
                description: "Monedero para gastos operativos",
                expiresAt: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000).toISOString() // 90 d√≠as
            }
        );

        let walletId;
        if (wallet.type === 'wallet_pending_auth') {
            console.log("üîê Autorizaci√≥n requerida para monedero");
            // Simular autorizaci√≥n
            const authorized = await paymentService.completeAuthorization(wallet.operationId);
            walletId = wallet.operationId;
        } else {
            walletId = wallet.operationId;
        }

        console.log(`‚úÖ Monedero creado: ${walletId}`);

        // Realizar pagos desde el monedero
        console.log("\n2Ô∏è‚É£ Pagos desde monedero:");

        const payment1 = await paymentService.payFromWallet(
            walletId,
            "https://ilp.interledger-test.dev/office_supplies",
            15000, // $150.00
            { description: "Suministros de oficina" }
        );
        console.log(`‚úÖ Pago 1 desde monedero: $${payment1.amount / 100}`);

        const payment2 = await paymentService.payFromWallet(
            walletId,
            "https://ilp.interledger-test.dev/software_vendor",
            35000, // $350.00
            { description: "Licencias de software" }
        );
        console.log(`‚úÖ Pago 2 desde monedero: ${payment2.amount / 100}`);

        // Programar pagos futuros desde el monedero
        console.log("\n3Ô∏è‚É£ Programando pagos futuros:");

        const tomorrow = new Date(Date.now() + 24 * 60 * 60 * 1000);
        const nextWeek = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000);

        await paymentService.schedulePaymentFromWallet(
            walletId,
            "https://ilp.interledger-test.dev/monthly_service",
            25000, // $250.00
            tomorrow,
            { description: "Pago mensual de servicio" }
        );

        await paymentService.schedulePaymentFromWallet(
            walletId,
            "https://ilp.interledger-test.dev/weekly_supplier",
            12000, // $120.00
            nextWeek,
            { description: "Pago semanal a proveedor" }
        );

        console.log("‚úÖ Pagos programados desde monedero");

        // Ver estado del monedero
        const walletStatus = paymentService.getOperationStatus(walletId);
        console.log("üìä Estado del monedero:", {
            usado: `${(walletStatus.data.totalUsed || 0) / 100}`,
            disponible: `${walletStatus.data.grantId ? 'N/A' : 'Calculando...'}`
        });

        return walletId;

    } catch (error) {
        console.error("‚ùå Error con monedero virtual:", error.message);
    }
}

async function ejemplosPagosRecurrentes() {
    try {
        console.log("\n=== üîÑ PAGOS RECURRENTES ===");

        // Configurar suscripci√≥n mensual
        console.log("\n1Ô∏è‚É£ Configurando suscripci√≥n mensual:");
        const subscription = await paymentService.setupRecurringPayment(
            "https://ilp.interledger-test.dev/subscriber",
            "https://ilp.interledger-test.dev/saas_service",
            9999, // $99.99 por mes
            {
                interval: "P1M", // Cada mes
                maxPayments: 12, // Un a√±o
                totalAmount: 119988 // $1,199.88 total
            },
            { description: "Suscripci√≥n anual SaaS" }
        );

        let subscriptionId;
        if (subscription.type === 'recurring_pending_auth') {
            console.log("üîê Autorizaci√≥n requerida para suscripci√≥n");
            // Simular autorizaci√≥n
            const authorized = await paymentService.completeAuthorization(subscription.operationId);
            subscriptionId = subscription.operationId;
        } else {
            subscriptionId = subscription.operationId;
        }

        console.log(`‚úÖ Suscripci√≥n configurada: ${subscriptionId}`);

        // Configurar n√≥mina quincenal
        console.log("\n2Ô∏è‚É£ Configurando n√≥mina quincenal:");
        const payroll = await paymentService.setupRecurringPayment(
            "https://ilp.interledger-test.dev/company_payroll",
            "https://ilp.interledger-test.dev/employee_alice",
            75000, // $750.00 quincenal
            {
                interval: "P14D", // Cada 14 d√≠as
                maxPayments: 26, // Un a√±o
                totalAmount: 1950000 // $19,500.00 anual
            },
            { description: "Salario Alice - Quincenal" }
        );

        let payrollId = payroll.operationId;
        if (payroll.type === 'recurring_pending_auth') {
            await paymentService.completeAuthorization(payroll.operationId);
        }

        console.log(`‚úÖ N√≥mina configurada: ${payrollId}`);

        // Ejecutar primer pago manualmente
        console.log("\n3Ô∏è‚É£ Ejecutando primer pago de suscripci√≥n:");
        const firstPayment = await paymentService.executeNextRecurringPayment(subscriptionId);
        console.log(`‚úÖ Primer pago ejecutado: ${firstPayment.quote.debitAmount.value / 100}`);

        // Iniciar monitoreo autom√°tico
        console.log("\n4Ô∏è‚É£ Iniciando monitoreo autom√°tico:");
        await paymentService.startRecurringPaymentMonitor(subscriptionId, 30000); // Verificar cada 30 segundos para demo
        console.log("üîÑ Monitor autom√°tico iniciado para suscripci√≥n");

        return { subscriptionId, payrollId };

    } catch (error) {
        console.error("‚ùå Error en pagos recurrentes:", error.message);
    }
}

async function ejemploGestionIntegrada() {
    try {
        console.log("\n=== üéØ GESTI√ìN INTEGRADA DE TODAS LAS OPERACIONES ===");

        // Ejecutar m√∫ltiples tipos de operaciones
        console.log("\n1Ô∏è‚É£ Creando m√∫ltiples operaciones:");

        // Monedero para gastos diversos
        const wallet = await paymentService.createPaymentWallet(
            "https://ilp.interledger-test.dev/main_account",
            300000, // $3,000.00
            { description: "Monedero principal de gastos" }
        );

        let walletId = wallet.operationId;
        if (wallet.type === 'wallet_pending_auth') {
            await paymentService.completeAuthorization(wallet.operationId);
        }

        // Pago recurrente para servicios
        const recurring = await paymentService.setupRecurringPayment(
            "https://ilp.interledger-test.dev/business_account",
            "https://ilp.interledger-test.dev/cloud_service",
            15000, // $150.00 mensual
            {
                interval: "P1M",
                maxPayments: 6,
                totalAmount: 90000
            }
        );

        let recurringId = recurring.operationId;
        if (recurring.type === 'recurring_pending_auth') {
            await paymentService.completeAuthorization(recurring.operationId);
        }

        // Pago dividido para proyecto
        const teamPayment = await paymentService.sendSplitPayment(
            "https://ilp.interledger-test.dev/project_budget",
            [
                {
                    walletUrl: "https://ilp.interledger-test.dev/team_lead",
                    type: "percentage",
                    value: 50,
                    baseAmount: 100000,
                    description: "Team Lead"
                },
                {
                    walletUrl: "https://ilp.interledger-test.dev/developer_1",
                    type: "percentage",
                    value: 30,
                    baseAmount: 100000,
                    description: "Senior Developer"
                },
                {
                    walletUrl: "https://ilp.interledger-test.dev/developer_2",
                    type: "percentage",
                    value: 20,
                    baseAmount: 100000,
                    description: "Junior Developer"
                }
            ]
        );

        console.log("‚úÖ M√∫ltiples operaciones creadas");

        // Ver todas las operaciones activas
        console.log("\n2Ô∏è‚É£ Estado de todas las operaciones:");
        const activeOps = paymentService.listActiveOperations();
        console.log(`üìã Operaciones activas: ${activeOps.length}`);

        activeOps.forEach((op, index) => {
            console.log(`  ${index + 1}. ${op.type} (${op.operationId}) - ${op.status}`);
        });

        // Realizar algunas transacciones
        console.log("\n3Ô∏è‚É£ Ejecutando transacciones:");

        // Pago desde monedero
        await paymentService.payFromWallet(
            walletId,
            "https://ilp.interledger-test.dev/vendor_1",
            45000,
            { description: "Compra de equipos" }
        );

        // Ejecutar pago recurrente
        await paymentService.executeNextRecurringPayment(recurringId);

        // Programar pago futuro desde monedero
        const futureDate = new Date(Date.now() + 60000); // 1 minuto
        await paymentService.schedulePaymentFromWallet(
            walletId,
            "https://ilp.interledger-test.dev/scheduled_vendor",
            20000,
            futureDate,
            { description: "Pago programado para demo" }
        );

        console.log("‚úÖ Transacciones ejecutadas");

        // Iniciar monitoreo global
        console.log("\n4Ô∏è‚É£ Iniciando monitoreo global:");
        const stopGlobalMonitor = paymentService.startScheduledPaymentMonitor(10000); // 10 segundos para demo
        await paymentService.startRecurringPaymentMonitor(recurringId, 15000); // 15 segundos para demo

        console.log("üîÑ Monitores globales iniciados");

        // Esperar para ver algunos resultados
        console.log("\n‚è≥ Esperando 70 segundos para ver monitores en acci√≥n...");
        await new Promise(resolve => setTimeout(resolve, 70000));

        // Detener monitores
        console.log("\n5Ô∏è‚É£ Deteniendo monitores:");
        stopGlobalMonitor();
        paymentService.stopRecurringPaymentMonitor(recurringId);
        console.log("üõë Monitores detenidos");

        return { walletId, recurringId, teamPayment };

    } catch (error) {
        console.error("‚ùå Error en gesti√≥n integrada:", error.message);
    }
}

async function ejemploLimpiezaYMantenimiento() {
    try {
        console.log("\n=== üßπ LIMPIEZA Y MANTENIMIENTO ===");

        // Ver estado de todas las operaciones
        console.log("\n1Ô∏è‚É£ Estado actual del sistema:");
        const activeOps = paymentService.listActiveOperations();
        console.log(`üìä Operaciones activas: ${activeOps.length}`);

        // Mostrar detalles de cada operaci√≥n
        activeOps.forEach(op => {
            const status = paymentService.getOperationStatus(op.operationId);
            console.log(`  ‚Ä¢ ${op.type}: ${status.status} (creada: ${status.createdAt.toLocaleString()})`);
        });

        // Simular cancelaci√≥n de alguna operaci√≥n
        if (activeOps.length > 0) {
            const opToCancel = activeOps.find(op => op.type === 'recurring_payment');
            if (opToCancel) {
                console.log(`\n2Ô∏è‚É£ Cancelando operaci√≥n: ${opToCancel.operationId}`);
                await paymentService.cancelOperation(opToCancel.operationId);
                console.log("‚úÖ Operaci√≥n cancelada");
            }
        }

        // Detener todos los monitores
        console.log("\n3Ô∏è‚É£ Deteniendo todos los monitores:");
        paymentService.stopAllMonitors();

        // Limpiar operaciones completadas
        console.log("\n4Ô∏è‚É£ Limpiando operaciones completadas:");
        const cleaned = paymentService.cleanupCompletedOperations();
        console.log(`üßπ ${cleaned} operaciones limpiadas`);

        // Estado final
        const finalActiveOps = paymentService.listActiveOperations();
        console.log(`\nüìä Estado final: ${finalActiveOps.length} operaciones activas`);

    } catch (error) {
        console.error("‚ùå Error en limpieza:", error.message);
    }
}

// Ejemplo de manejo de errores y casos especiales
async function ejemploManejoErrores() {
    try {
        console.log("\n=== ‚ö†Ô∏è MANEJO DE ERRORES ===");

        // Intentar usar una operaci√≥n inexistente
        console.log("\n1Ô∏è‚É£ Probando operaci√≥n inexistente:");
        try {
            await paymentService.getOperationStatus("operacion_inexistente");
        } catch (error) {
            console.log(`‚úÖ Error capturado correctamente: ${error.message}`);
        }

        // Intentar pagar m√°s de lo disponible en un monedero
        console.log("\n2Ô∏è‚É£ Probando l√≠mites de monedero:");
        const smallWallet = await paymentService.createPaymentWallet(
            "https://ilp.interledger-test.dev/limited_account",
            1000, // Solo $10.00
            { description: "Monedero peque√±o para pruebas" }
        );

        let smallWalletId = smallWallet.operationId;
        if (smallWallet.type === 'wallet_pending_auth') {
            await paymentService.completeAuthorization(smallWallet.operationId);
        }

        try {
            await paymentService.payFromWallet(
                smallWalletId,
                "https://ilp.interledger-test.dev/expensive_vendor",
                50000, // $500.00 - m√°s de lo disponible
                { description: "Pago que excede l√≠mites" }
            );
        } catch (error) {
            console.log(`‚úÖ L√≠mites respetados correctamente: ${error.message}`);
        }

        // Intentar completar autorizaci√≥n de operaci√≥n incorrecta
        console.log("\n3Ô∏è‚É£ Probando autorizaci√≥n incorrecta:");
        try {
            await paymentService.completeAuthorization(smallWalletId); // No necesita autorizaci√≥n
        } catch (error) {
            console.log(`‚úÖ Validaci√≥n correcta: ${error.message}`);
        }

        console.log("‚úÖ Manejo de errores funcionando correctamente");

    } catch (error) {
        console.error("‚ùå Error inesperado en manejo de errores:", error.message);
    }
}

// Funci√≥n principal que ejecuta todos los ejemplos
async function ejecutarDemoCompleta() {
    console.log("üöÄ DEMO COMPLETA DEL UNIFIED PAYMENT SERVICE");
    console.log("===============================================================");

    try {
        // Ejecutar todos los ejemplos
        await ejemplosPagosSimples();
        //await ejemplosPagosDivididos();
       // const walletId = await ejemplosMonederoVirtual();
        //const { subscriptionId, payrollId } = await ejemplosPagosRecurrentes();
        //await ejemploGestionIntegrada();
        //await ejemploManejoErrores();
        //await ejemploLimpiezaYMantenimiento();

        console.log("\nüéâ DEMO COMPLETA FINALIZADA EXITOSAMENTE!");
        console.log("\nüìã RESUMEN DE CAPACIDADES DEMOSTRADAS:");
        console.log("‚úÖ Pagos √∫nicos simples y complejos");
        console.log("‚úÖ Pagos divididos con montos fijos y porcentajes");
        console.log("‚úÖ Monederos virtuales para m√∫ltiples pagos");
        console.log("‚úÖ Pagos recurrentes con monitoreo autom√°tico");
        console.log("‚úÖ Gesti√≥n integrada de todas las operaciones");
        console.log("‚úÖ Manejo robusto de errores");
        console.log("‚úÖ Herramientas de limpieza y mantenimiento");

        return {
            success: true,
            message: "Todas las funcionalidades del UnifiedPaymentService demostradas exitosamente"
        };

    } catch (error) {
        console.error("‚ùå Error en demo completa:", error.message);
        return {
            success: false,
            error: error.message
        };
    }
}

// Ejemplo de uso espec√≠fico para diferentes industrias
async function ejemplosIndustriaEspecifica() {
    console.log("\n=== üè¢ EJEMPLOS POR INDUSTRIA ===");

    // E-commerce
    console.log("\nüõí E-COMMERCE:");

    // Pago de pedido con comisiones autom√°ticas
    const orderAmount = 150000; // $1,500.00
    const ecommercePayment = await paymentService.distributeCommissions(
        "https://ilp.interledger-test.dev/remitente_test",
        orderAmount,
        [
            {
                walletUrl: "https://ilp.interledger-test.dev/remitente_test",
                percentage: 80,
                description: "Pago al vendedor"
            },
            {
                walletUrl: "https://ilp.interledger-test.dev/client_test",
                percentage: 15,
                description: "Comisi√≥n plataforma"
            },
            {
                walletUrl: "https://ilp.interledger-test.dev/yisus19",
                percentage: 5,
                description: "Comisi√≥n procesador"
            }
        ]
    );
    console.log("‚úÖ Pedido e-commerce procesado con distribuci√≥n autom√°tica");

    // Freelance/Gig Economy
    console.log("\nüë®‚Äçüíª FREELANCE/GIG ECONOMY:");

    // Monedero para m√∫ltiples proyectos freelance
    const freelanceWallet = await paymentService.createPaymentWallet(
        "https://ilp.interledger-test.dev/yisus19",
        500000, // $5,000.00 para m√∫ltiples proyectos
        {
            description: "Budget para proyectos freelance Q1 2025",
            expiresAt: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000).toISOString()
        }
    );

    let freelanceWalletId = freelanceWallet.operationId;
    if (freelanceWallet.type === 'wallet_pending_auth') {
        await paymentService.completeAuthorization(freelanceWallet.operationId);
    }

    // Pagos por hitos de proyecto
    await paymentService.schedulePaymentFromWallet(
        freelanceWalletId,
        "https://ilp.interledger-test.dev/yisus19",
        75000, // $750.00
        new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 1 semana
        { description: "Hito 1: Dise√±o UI completado" }
    );

    await paymentService.schedulePaymentFromWallet(
        freelanceWalletId,
        "https://ilp.interledger-test.dev/yisus19",
        100000, // $1,000.00
        new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), // 2 semanas
        { description: "Hito 2: Desarrollo frontend" }
    );

    console.log("‚úÖ Proyecto freelance con pagos por hitos programados");

    // SaaS/Suscripciones
    console.log("\nüíª SAAS/SUSCRIPCIONES:");

    // Suscripci√≥n con diferentes planes
    const enterpriseSubscription = await paymentService.setupRecurringPayment(
        "https://ilp.interledger-test.dev/client_test",
        "https://ilp.interledger-test.dev/remitente_test",
        49999, // $499.99 mensual plan enterprise
        {
            interval: "P1M",
            maxPayments: 12,
            totalAmount: 599988, // $5,999.88 anual con descuento
        },
        { description: "Plan Enterprise - Facturaci√≥n anual" }
    );

    let enterpriseSubId = enterpriseSubscription.operationId;
    if (enterpriseSubscription.type === 'recurring_pending_auth') {
        await paymentService.completeAuthorization(enterpriseSubscription.operationId);
    }

    // Iniciar monitoreo autom√°tico para suscripciones
    await paymentService.startRecurringPaymentMonitor(enterpriseSubId);
    console.log("‚úÖ Suscripci√≥n enterprise con facturaci√≥n autom√°tica configurada");

    return {
        ecommercePayment,
        freelanceWalletId,
        enterpriseSubId
    };
}

// Exportar todas las funciones de ejemplo
export {
    ejemplosPagosSimples,
    ejemplosPagosDivididos,
    ejemplosMonederoVirtual,
    ejemplosPagosRecurrentes,
    ejemploGestionIntegrada,
    ejemploLimpiezaYMantenimiento,
    ejemploManejoErrores,
    ejemplosIndustriaEspecifica,
    ejecutarDemoCompleta
};

// Ejecutar demo completa si se ejecuta directamente
if (import.meta.main) {
    console.log("üéØ Iniciando demo del Unified Payment Service...");
    const result = await ejecutarDemoCompleta();

    // if (result.success) {
    //     console.log("\nüéâ ¬°Demo ejecutada exitosamente!");
    //
    //     // Ejecutar ejemplos por industria
    //     console.log("\nüè≠ Ejecutando ejemplos por industria...");
    //     await ejemplosIndustriaEspecifica();
    //
    // } else {
    //     console.log(`\n‚ùå Demo fall√≥: ${result.error}`);
    // }
}